<script lang="ts">
	import { onMount } from 'svelte';
	import type { TailwindStats } from '$lib/services/repository';

	let repoUrl = $state('https://github.com/jesi-rgb/conduit');
	let isAnalyzing = $state(false);
	let error = $state<string | null>(null);
	let repoStats = $state<TailwindStats | null>(null);
	let globalStats = $state<Array<{ className: string; count: number }>>([]);
	let showGlobalStats = $state(false);

	// Progress state for SSE
	let progress = $state<{
		repoUrl: string;
		status: 'fetching' | 'parsing' | 'analyzing' | 'saving' | 'completed';
		filesProcessed?: number;
		totalFiles?: number;
		currentFile?: string;
	} | null>(null);

	onMount(async () => {
		try {
			const response = await fetch('/api/global');
			if (response.ok) {
				globalStats = await response.json();
			} else {
				console.error('Error fetching global stats:', response.status);
			}
		} catch (e) {
			console.error('Error fetching global stats:', e);
		}
	});

	async function handleAnalyze() {
		if (!repoUrl) {
			error = 'Please enter a GitHub repository URL';
			return;
		}

		// Simple validation for GitHub URL
		if (!repoUrl.includes('github.com/')) {
			error = 'Please enter a valid GitHub repository URL';
			return;
		}

		error = null;
		isAnalyzing = true;
		repoStats = null;
		progress = null;

		try {
			// Start the analysis via POST request which returns SSE stream
			const response = await fetch('/api/repo', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json'
				},
				body: JSON.stringify({ repoUrl })
			});

			if (!response.ok) {
				throw new Error('Failed to start analysis');
			}

			// Read the SSE stream
			const reader = response.body?.getReader();
			const decoder = new TextDecoder();

			if (!reader) {
				throw new Error('No response body');
			}

			let currentEventType = '';

			while (true) {
				const { done, value } = await reader.read();
				if (done) break;

				const chunk = decoder.decode(value);
				const lines = chunk.split('\n');

				for (const line of lines) {
					if (line.startsWith('event: ')) {
						currentEventType = line.substring(7);
						continue;
					}

					if (line.startsWith('data: ') && line.length > 6) {
						try {
							const data = JSON.parse(line.substring(6));

							// Handle different event types
							if (currentEventType === 'progress') {
								progress = {
									repoUrl,
									status: data.status,
									filesProcessed: data.filesProcessed,
									totalFiles: data.totalFiles,
									currentFile: data.currentFile
								};
							} else if (currentEventType === 'file-processed') {
								if (progress) {
									progress = {
										repoUrl: progress.repoUrl,
										status: progress.status,
										totalFiles: progress.totalFiles,
										filesProcessed: data.filesProcessed,
										currentFile: data.filePath
									};
								}
							} else if (currentEventType === 'completed') {
								repoStats = {
									repo: { id: data.repoId, owner: '', name: '' } as any,
									classCounts: data.classCounts,
									total: data.totalClasses,
									topClasses: data.topClasses,
									lastUpdated: new Date()
								};
								isAnalyzing = false;
								return;
							} else if (currentEventType === 'error') {
								error = data.message;
								isAnalyzing = false;
								return;
							}
						} catch (parseError) {
							console.error('Error parsing SSE data:', parseError);
						}
					}
				}
			}
		} catch (e) {
			console.error('Error analyzing repository:', e);
			error = 'An error occurred while analyzing the repository.';
			isAnalyzing = false;
		}
	}
</script>

<main class="border-base-content flex h-screen flex-col overflow-hidden border-2">
	<!-- Header Grid -->
	<div class="border-base-content grid flex-shrink-0 grid-cols-1 border-b-2 md:grid-cols-3">
		<!-- Title Section -->
		<div class="border-base-content border-r-2 p-6 md:col-span-2">
			<h1 class="text-4xl font-bold tracking-wider uppercase">TALLYWIND</h1>
			<p class="mt-2 font-mono text-lg">TAILWIND CLASS COUNTER & ANALYZER</p>
		</div>

		<!-- Navigation -->
		<div class="border-base-content flex items-center justify-center p-6">
			<a
				href="/global"
				class="border-base-content hover:bg-base-content hover:text-base-100 border-2 px-4 py-2 font-mono uppercase transition-colors"
			>
				GLOBAL STATS
			</a>
		</div>
	</div>

	<!-- Main Content Grid -->
	<div class="grid flex-1 grid-cols-1 overflow-hidden lg:grid-cols-2">
		<!-- Left Column: Description & Features -->
		<div class="border-base-content flex flex-col border-r-2">
			<!-- Description -->
			<div class="border-base-content flex-shrink-0 border-b-2 p-6">
				<h2 class="mb-4 text-xl font-bold uppercase">DISCOVER HIDDEN PATTERNS</h2>
				<p class="font-mono leading-relaxed">
					Analyze GitHub repositories to count and categorize every Tailwind CSS class. Reveal
					insights about your design system usage and optimize your styling approach.
				</p>
			</div>

			<!-- Features Grid -->
			<div class="flex flex-1 flex-col">
				<div class="border-base-content flex flex-1 items-center border-b-2 p-6">
					<div class="flex w-full items-start gap-4">
						<div class="text-2xl">ðŸ“Š</div>
						<div>
							<h3 class="font-bold uppercase">USAGE STATISTICS</h3>
							<p class="mt-1 font-mono text-sm">
								Detailed breakdowns of class frequency and most-used utilities
							</p>
						</div>
					</div>
				</div>

				<div class="border-base-content flex flex-1 items-center border-b-2 p-6">
					<div class="flex w-full items-start gap-4">
						<div class="text-2xl">ðŸŽ¨</div>
						<div>
							<h3 class="font-bold uppercase">DESIGN PATTERNS</h3>
							<p class="mt-1 font-mono text-sm">
								Identify common styling patterns and component opportunities
							</p>
						</div>
					</div>
				</div>

				<div class="flex flex-1 items-center p-6">
					<div class="flex w-full items-start gap-4">
						<div class="text-2xl">âš¡</div>
						<div>
							<h3 class="font-bold uppercase">OPTIMIZATION INSIGHTS</h3>
							<p class="mt-1 font-mono text-sm">Spot unused classes and optimize CSS bundle size</p>
						</div>
					</div>
				</div>
			</div>
		</div>

		<!-- Right Column: Analysis Form -->
		<div class="flex flex-col">
			<div class="border-base-content flex-shrink-0 border-b-2 p-6">
				<h2 class="mb-4 text-xl font-bold uppercase">ANALYZE REPOSITORY</h2>

				<div class="space-y-4">
					<div>
						<label class="mb-2 block font-mono text-sm uppercase" for="repo-url">
							GITHUB REPOSITORY URL
						</label>
						<input
							bind:value={repoUrl}
							type="text"
							id="repo-url"
							placeholder="https://github.com/username/repo"
							class="border-base-content focus:bg-base-200 w-full border-2 bg-transparent p-3 font-mono transition-colors"
						/>
					</div>

					<button
						class="border-base-content hover:bg-base-content hover:text-base-100 w-full border-2 p-3 font-mono font-bold uppercase transition-colors disabled:cursor-not-allowed disabled:opacity-50"
						onclick={handleAnalyze}
						disabled={isAnalyzing}
					>
						{isAnalyzing ? 'ANALYZING...' : 'ANALYZE REPOSITORY'}
					</button>

					{#if error}
						<div class="border-error bg-error/10 border-2 p-3 font-mono text-sm">
							ERROR: {error}
						</div>
					{/if}
				</div>
			</div>

			<!-- Status Badges -->
			<div class="flex flex-1 items-center justify-center p-6">
				<div class="grid w-full grid-cols-1 gap-0">
					<div class="border-base-content border-2 p-4 text-center">
						<div class="mb-1 font-mono text-sm uppercase">CLASS</div>
						<div class="font-mono text-sm uppercase">ANALYTICS</div>
					</div>
					<div class="border-base-content border-2 border-t-0 p-4 text-center">
						<div class="mb-1 font-mono text-sm uppercase">PATTERN</div>
						<div class="font-mono text-sm uppercase">DISCOVERY</div>
					</div>
					<div class="border-base-content border-2 border-t-0 p-4 text-center">
						<div class="mb-1 font-mono text-sm uppercase">REAL-TIME</div>
						<div class="font-mono text-sm uppercase">ANALYSIS</div>
					</div>
				</div>
			</div>
		</div>
	</div>

	<!-- Progress Display -->
	{#if progress && isAnalyzing}
		<div class="border-base-content border-t-2">
			<div class="border-base-content border-b-2 p-6">
				<h2 class="mb-4 text-xl font-bold uppercase">ANALYSIS PROGRESS</h2>

				<div class="grid grid-cols-1 gap-0 md:grid-cols-2">
					<div class="border-base-content border-2 p-4">
						<div class="mb-2 font-mono text-sm uppercase">STATUS</div>
						<div class="font-bold uppercase">{progress.status}</div>
					</div>

					{#if progress.totalFiles && progress.filesProcessed !== undefined}
						<div
							class="border-base-content border-2 border-t-0 border-l-0 p-4 md:border-t-2 md:border-l-2"
						>
							<div class="mb-2 font-mono text-sm uppercase">FILES PROCESSED</div>
							<div class="font-bold">{progress.filesProcessed} / {progress.totalFiles}</div>
						</div>
					{/if}
				</div>

				{#if progress.totalFiles}
					<div class="border-base-content mt-4 border-2">
						<div
							class="bg-base-content h-4 transition-all duration-300"
							style="width: {((progress.filesProcessed || 0) / progress.totalFiles) * 100}%"
						></div>
					</div>
				{/if}

				{#if progress.currentFile}
					<div class="border-base-content mt-4 border-2 p-3">
						<div class="mb-1 font-mono text-xs uppercase">CURRENTLY PROCESSING</div>
						<div class="font-mono text-sm break-all">{progress.currentFile}</div>
					</div>
				{/if}
			</div>
		</div>
	{/if}

	{#if repoStats}
		<div class="border-base-content border-t-2">
			<!-- Results Header -->
			<div class="border-base-content border-b-2 p-6">
				<h2 class="text-xl font-bold uppercase">
					RESULTS: {repoStats.repo.owner}/{repoStats.repo.name}
				</h2>
			</div>

			<!-- Stats Grid -->
			<div class="grid grid-cols-1 md:grid-cols-2">
				<div class="border-base-content border-r-2 p-6">
					<div class="border-base-content border-2 p-4 text-center">
						<div class="mb-2 font-mono text-sm uppercase">TOTAL CLASSES</div>
						<div class="text-3xl font-bold">{repoStats.total}</div>
					</div>
				</div>

				<div class="p-6">
					<div class="border-base-content border-2 p-4 text-center">
						<div class="mb-2 font-mono text-sm uppercase">UNIQUE CLASSES</div>
						<div class="text-3xl font-bold">{Object.keys(repoStats.classCounts).length}</div>
					</div>
				</div>
			</div>

			<!-- Top Classes -->
			<div class="border-base-content border-t-2 p-6">
				<h3 class="mb-4 font-bold uppercase">TOP 20 CLASSES</h3>
				<div class="grid grid-cols-1 gap-0">
					{#each repoStats.topClasses as { className, count }, index}
						<div
							class="border-2 {index > 0
								? 'border-t-0'
								: ''} border-base-content flex items-center justify-between p-3"
						>
							<div class="font-mono">{className}</div>
							<div class="border-base-content border px-2 py-1 font-mono text-sm">{count}</div>
						</div>
					{/each}
				</div>
			</div>

			<!-- All Classes Toggle -->
			<div class="border-base-content border-t-2">
				<details class="group">
					<summary
						class="border-base-content hover:bg-base-200 cursor-pointer border-b-2 p-6 font-bold uppercase transition-colors"
					>
						SHOW ALL CLASSES
					</summary>
					<div class="p-6">
						<div class="grid max-h-96 grid-cols-1 gap-0 overflow-y-auto">
							{#each Object.entries(repoStats.classCounts).sort(([, countA], [, countB]) => countB - countA) as [className, count], index}
								<div
									class="border-2 {index > 0
										? 'border-t-0'
										: ''} border-base-content flex items-center justify-between p-2"
								>
									<div class="font-mono text-sm">{className}</div>
									<div class="border-base-content border px-2 py-1 font-mono text-xs">{count}</div>
								</div>
							{/each}
						</div>
					</div>
				</details>
			</div>
		</div>
	{/if}
</main>
